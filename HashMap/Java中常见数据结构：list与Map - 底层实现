
集合
            Collection(单列集合)
                List(有序，可重复)
                    ArrayList(随机访问)
                        底层数据结构是数组，查询快，增删慢
                        线程不安全，效率高
                    Vector(自动增长的对象数组)
                        底层数据结构是数组，查询快，增删慢
                        线程安全，效率低
                    LinkedList
                        底层数据结构是链表，查询慢，增删快
                        线程不安全，效率高
                Set(无序，唯一)
                    HashSet
                        底层数据结构是哈希表
                        哈希表依赖两个方法：HashCode()和equals()
                        执行顺序：
                            首先判断hashCode()值是否相同
                                是：继续执行equals()，看其返回值
                                    是true:说明元素重复，不添加
                                    是false：就直接添加到集合
                                否：就直接添加到集合
                         最终：
                                自动生成hashCode()和equals()即可

                         LinkedHashSet
                                底层数据结构由链表和哈希表组成。
                                由链表保证元素有序
                                由哈希表保证元素唯一。
                     TreeSet
                          底层数据结构是红黑树。(是一种自平衡的二叉树)
                          如何保证元素的唯一性呢？
                               根据比较的返回值是否是0来决定
                          如何保证元素的排序呢？
                                两种方式
                                    自然排序(元素具备比较性)
                                        让元素所属的类比较Comparable接口
                                    比较器排序(集合具备比较性)
                                        让集合接收一个Comparator的实现类对象


            Map(双列集合)
                A：Map集合的数据结构仅仅针对键有效，与值无关
                B：存储的是键值对形式的元素，键唯一，值可重复。

                HashMap
                    底层数据结构是哈希表，线程不安全,效率高
                        哈希表依赖两个方法:hashCode()和equals()
                        执行顺序:
                            首先判断hashCode()值是否相同
                                是：继续执行equals()，看其返回值
                                     是true：说明元素重复,不添加
                                     是false:就直接添加到集合
                                否：就直接添加到集合
                        最终：
                            自动生成hashCode()和equals()即可

                     LinkedHashMap
                        底层数据结构由链表和哈希表组成。
                            由链表保证元素有序
                            由哈希表保证元素唯一。

                Hashtable
                    底层数据结构是哈希表。线程安全，效率低
                        哈希表依赖两个方法:hashCode()和equals()
                        执行顺序：
                            首先判断hashCode()值是否相同
                                是：继续执行equals()，看其返回值
                                    是true：说明元素重复,不添加
                                    是false:就直接添加到集合

                                否：就直接添加到集合

                        最终：
                            自动生成hashCode()和equals()即可

                TreeMap
                    底层数据结构是红黑树。(是一种自平衡的二叉树)
                        如何保证元素的唯一性呢？
                            根据比较的返回值是否是0来决定
                        如何保证元素的排序呢？
                            两种方式
                                自然排序(元素具备比较性)
                                        让元素所属的类实现Comparable接口
                                比较器排序(集合具备比较性)
                                        让集合接收一个Comparator的实现类对象


 2、关于集合选取原则

        是否是键值对象形式：
            是：Map
                    键是否需要排序：
                         是：TreeMap
                         否：HashMap
                    不知道，就使用HashMap。

            否：Collection
                元素是否唯一：
                    是：Set
                        元素是否需要排序
                            是：TreeSet
                            否：HashSet
                        不知道，就使用HashSet

                    是：List
                        要安全吗：
                             是：Vector
                             否：ArrayList或者LinkedList
                                    增删多：LinkedList
                                    查询多：ArrayList
                             不知道，就使用ArrayList

                不知道就使用ArrayList


 3、集合的常见方法及遍历方式
       Collection:
            add()
            remove()
            contains();//包含
            iterator();//迭代器
            size();

            遍历：
                    增强for
                    迭代器
                    Iterator iterList = list.iterator();//List接口实现了Iterator接口
                     //循环list
                     while(iterList.hasNext()) {
                        String strList = (String)iterList.next();
                        Systrm.out.println(strList.toString());
                     }

                     Iterator iterMap = map.entrySet().iterator();
                     //循环map
                        while(iterMap.hasNext()){
                          Map.Entry  strMap = (Map.Entry)iterMap.next();
                          Systrm.out.println(strMap.getValue());
                        }

                     | - - List
                            get()

                            遍历：
                                    普通for
                     | - - Set

       Map:
             put()
             remove()
             containsKey(),containsValue();//判断是否包含键|值对
             keySet()
             get()
             value()
             entrySet()
             size()


             遍历：
                    根据键找值
                    根据键值对对象分别找键和值


 1：集合(自己补齐)

 Collection(单列集合)

 List(有序，可重复)
     ArrayList底层数据结构是数组，查询快，增删慢线程不安全，效率高。
     Vector底层数据结构是数组，查询快，增删慢线程安全，效率低
     LinkedList底层数据结构是链表，查询慢，增删快线程不安全，效率高Set(无序，唯一)
et底层数据结构是哈希表。哈希表依赖两个方法：hashCode()和equals()
        执行顺序：首先判断hashCode()值是否相同
            是：继续继续equals()，看其返回值是true:说明元素重复，不添加false:就直接添加到集合
            否：就直接添加到集合最终：自动生成hashCode()和equals()即可
     LinkedHashSet底层数据结构由链表和哈希表组成。由链表保证元素无序。由哈希表保证元素唯一。

     TreeSet底层数据结构是红黑树。(是一种自平衡的二叉树)如何保证元素唯一性呢？如何根据比较的返回值是否是0来决定如何保证元素的排序呢？
        两种方式自然排序(元素具备比较性)让元素所属的类实现Comparable接口比较器排序(集合具备比较性)让集合接收一个Comparator的实现类
        对象Map(双列集合)
            A：Map集合的数据结构仅仅针对键有效，与值无关。
            B：存储的是键值对形式的元素，键唯一，值可重复。

     HashMap底层数据结构是哈希表。线程不安全，效率高哈希表依赖两个方法：
            hashCode 和equals()执行顺序：
                   首先判断hashCode值是否相同
                         是:继续执行equals()，看其返回值是true：说明元素重复，不添加是false;就直接添加到集合
                         否：就直接添加到集合最终：自动生成hashCode和equals()即可
     LinkedHashMap底层数据结构由链表和哈希表组成。由链表保证元素有序。由哈希表保证元素唯一。

     Hashtable底层数据结构是哈希表。线程安全，效率低哈希表依赖两个方法：
            hashCode()和equals()执行顺序：首先判断hashCode()值是否相同
                是:继续执行equals()，看其返回值是true：说明元素重复，不添加是false:就直接添加到集合
                否：就直接添加到集合最终，自动生成hashCode()和equals()即可
     TreeMap底层数据结构是红黑树。(是一种自平衡的二叉树)

     如何保证元素唯一性呢？
       根据比较返回值是否是0来决定如何保证元素的排序呢？
            两种方式自然排序(元素具备比较性)让元素所属的类实现Comparable接口比较器排序(集合具备比较性)让集合接收一个Comparator的实现类对象

   2、到底使用那种集合主要看需求
        是否是键值对象形式：是
        Map键是否需要排序：是
        TreeMap:否
        HashMap:不知道，就使用HashMap
        Collection元素是否唯一：是
        Set元素是否需要排序：是
        TreeSet：否
        HashSet不知道，就使用HashSet
        List要安全吗：是
        Vector:否
        ArrayList：否
        LinkedList：增删多
        ArrayList:查询多











