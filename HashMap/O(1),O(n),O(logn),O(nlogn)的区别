O(1),O(n),O(logn),O(nlogn)的区别

在描述算法复杂度时，经常用到O(1),O(n),O(logn),O(nlogn)来表示对应复杂度程度，不过目前的大家默认也通过这几个方式表示空间复杂度。

大O加上()的形式，里面其实包裹的是一个函数f(),O(f())，指明某个算法的耗时/耗空间与数据增长常量之间的关系。其中的n代表输入数据的量

O(1)  最低复杂度，常量值 也就是耗时/耗空间与输入数据大小无关       哈希算法就是经典的O(1)时间复杂度，无论数据规模多大
       无论输入数据增大多少倍，耗时/耗空间都不变                    都可以在一次计算后找到目标（不考虑冲突的话）
O(n)   数据量增大几倍，耗时也增大几倍                              遍历算法
O(n~2)  对n个数排序，需要扫描n X n次                               冒泡排序
O(logn)  当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，  二分查找就是O(logn)的算法，每找一次排除一半的可能，
        比如，当数据增大256倍时，耗时只增大8倍                     256个数据中查找只要找8次就可以找到的目标

O(nlogn)  就是n乘以logn，当数据增大256倍时，耗时增大256*8 = 2048倍。这个
           复杂度高于线程性低于平方。归并排序就是O(nlogn)的时间复杂度。
